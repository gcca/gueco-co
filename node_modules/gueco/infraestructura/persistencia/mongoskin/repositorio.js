/*! \package infraestructura.persistencia.mongo
 */

var configuracion =
    require('gueco/infraestructura/persistencia/mongoskin/configuracion')

var mongo = require('mongoskin').db(configuracion.datos.recurso, {safe:false})

/*var dii = "mongodb://gueco:dracula@staff.mongohq.com:10056/gueco"
var mongo = require('mongoskin').db(dii)*/

//! \var colección
repositorio.prototype.coleccion = null

/*! todos
 * \brief Todas las entidades
 * \param retrollamada función(erroar, entidades)
 */
repositorio.prototype.todos = function(retrollamada) {
    mongo.collection(this.coleccion).find().toArray(function(error,
                                                             entidades){
        for(var i in entidades) {
            var entidad = entidades[i]
            entidad.id = entidad._id.toString()
            delete entidades[i]._id
        }
        retrollamada(error, entidades)
    })
}

/*! uno
 * \brief Una entidad
 * \param entidad entidad
 * \param retrollamada función(error, entidad)
 */
repositorio.prototype.uno = function(entidad, retrollamada) {
    if (entidad.id) {
        entidad._id = mongo.toId(entidad.id)
        delete entidad.id
    }
    mongo.collection(this.coleccion).findOne(entidad, function(error,
                                                               entidad) {
        if (!error && entidad) {
            entidad.id = entidad._id.toString()
            delete entidad._id
        }

        retrollamada(error, entidad)
    })
}

/*! buscar
 * \brief Busca entidades por especificación
 * \param especificador Especificador de entidades
 * \param retrollamada función(especificador, retrollamada)
 */
repositorio.prototype.buscar = function(especificador,
                                        retrollamada) {
    mongo.collection(this.coleccion).find(especificador.especifica)
        .toArray(function(error, entidades) {
            for(var i in entidades) {
                var entidad = entidades[i]
                entidad.id = entidad._id.toString()
                delete entidad._id
            }
            retrollamada(error, entidades)
    })
}

/*! almacenar
 * \brief Almacena entidades
 * \param entidad entidad
 * \param retrollamada función(especificacion, retrollamada)
 */
repositorio.prototype.almacenar = function(ientidad,
                                           retrollamada) {
    entidad = {}
    for(var i in ientidad) entidad[i] = ientidad[i]

    if (entidad.id) {
        entidad._id = mongo.toId(entidad.id)
        delete entidad.id
    }

    mongo.collection(this.coleccion).save(entidad,
                                          function(error, id) {
        if (retrollamada) retrollamada(error,
                                       id ? id._id.toString() : undefined)
    })
}

/*! borrar
 * \brief Borrar entidad
 * \param entidad entidad
 * \param retrollamada func(error)
 */
repositorio.prototype.borrar = function(ientidad, retrollamada) {
    entidad = {}
    for(var i in ientidad) entidad[i] = ientidad[i]

    if (entidad.id) {
        entidad._id = mongo.toId(entidad.id)
        delete entidad.id
    }

    mongo.collection(this.coleccion).remove(entidad)
}

/*! repositorio
 * \class repositorio
 * \brief Repositorio mongo
 * \docgen función repositorio ()
 */
function repositorio () {}

repositorio.mongo = mongo
repositorio.aId = function(hex){return mongo.toId(hex)}

module.exports = repositorio
